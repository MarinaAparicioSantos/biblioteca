/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package clases;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.InputMismatchException;
import java.util.Scanner;
/**
 * 
 * @author Marina
 *
 */
public class Main {

	public static void main(String[] args) throws IOException {

		ArrayList<Libro> catalogo = new ArrayList<Libro>();

		while (true) {
			int opcion = menu();
			switch (opcion) {
			case 1:
				//Alta de Libro
				alta(catalogo);
				break;
			case 2:
				//Lista de Libros
				listaLibros(catalogo); 
				break;
			case 3:
				//Baja de libros
				baja(catalogo); 
				break;
			case 4:
				//Busqueda de libros
				busqueda(catalogo); 
				break;
			case 5:
				//Ordenar libros
				ordenar(catalogo);
				break;
			case 6:
				//Salvar fichero
				salvarFichero(catalogo);
				break;
			case 7:
				//Cargar fichero
				cargarFichero(catalogo);
				break;
			case 8:
				//Limpiar catalogo
				limpiarCatalogo(catalogo);
				break;
			default:
				break;
			}
		}
	}

	/**
	 * 
	 * @return opcion
	 */
	private static int menu() {
		int opcion = 0;

		do {
			System.out.println("Opciones:");
			System.out.println("1. Alta de Libro");
			System.out.println("2. Lista de Libros");
			System.out.println("3. Baja de Libros");
			System.out.println("4. Busqueda de Libros");
			System.out.println("5. Ordenacion de Libros");
			System.out.println("6. Salvar fichero");
			System.out.println("7. Cargar fichero");
			System.out.println("8. Limpiar catálogo.");
			System.out.println("Introduce la opcion:");

			opcion = leerOpcion(8);

		} while (opcion <= 0);

		return opcion;
	}

	/**
	 * 
	 * @param max
	 * @return opcion
	 */
	private static int leerOpcion(int max) {
		int opcion = -1;
		try {
			Scanner teclado = new Scanner(System.in);
			opcion = teclado.nextInt();
			//Si opcion es menor mayor que max, opcion toma el valor -1.
			if (opcion > max)
				opcion = -1;
			//Excepcion
		} catch (InputMismatchException e) {
			System.out.println("Opcion incorrecta");
		}

		return opcion;
	}

	/**
	 * Metodo que añade los libros.
	 * @param catalogo
	 */
	private static void alta(ArrayList<Libro> catalogo) {
		// Leer de la entrada
		String datosLibro = obtenerDatosLibro();
		// titulo:isbn:genero:autor:paginas
		// Procesar la entrada
		Libro libro = procesaEntrada(datosLibro);
		// Crear el libro con los datos de la entrada
		catalogo.add(libro);
		// Meter el libro en el catalogo

	}

	/**
	 * Metodo que pide los datos del libro al usuario.
	 * @return datos 
	 */
	private static String obtenerDatosLibro() {
		String datos = null;

		boolean validado = false;
		//Mientras validado sea verdadero.
		while (!validado) {
			System.out.println("Introduce los datos de un libro.");
			System.out.println("Usa el formato \"titulo:isbn:genero:autor:paginas\"");
			try {
				datos = leerCadena();
				if (true)// Supongo de momento que valida siempre
					validador1(datos);
					validado = true;
			} catch (InputMismatchException e) {
				System.out.println("Datos de entrada no validos");
			}
		}

		return datos;
	}

	/**
	 * 
	 * @param entrada
	 * @return libro
	 */
	private static Libro procesaEntrada(String entrada) {
		Libro libro = null;

		String[] datos = entrada.split(":");

		String titulo = datos[0];
		String isbn = datos[1];
		Genero genero = Genero.getGenero(datos[2]);
		String autor = datos[3];
		Integer paginas = Integer.parseInt(datos[4]);

		libro = new Libro(titulo, isbn, genero, autor, paginas);

		return libro;
	}

	/**
	 * 
	 * @return opcion
	 */
	private static String leerCadena() {
		String opcion = null;
		Scanner teclado = new Scanner(System.in);
		opcion = teclado.nextLine();
		return opcion;
	}

	/**
	 * Metodo que muestra la lista de libros.
	 * @param catalogo
	 */
	private static void listaLibros(ArrayList<Libro> catalogo) {

		// principito:2323:novela:marina:100

		int i = 0;
		//Bucle for que recorre el catalogo de libros.
		for (Libro l : catalogo) {
			System.out.println("Libro en posicion: " + i);
			System.out.println(l);
			i++;

		}

	}

	/**
	 * Metodo que borra un libro del catalogo.
	 * @param catalogo
	 */
	private static void baja(ArrayList<Libro> catalogo) {
		Scanner teclado = new Scanner(System.in);
		System.out.println("Cual libro quieres borrar?");
		//Pide al usuario la posición del libro.
		int libroBorrar = teclado.nextInt();
		catalogo.remove(libroBorrar);

	}


	/**
	 * Metodo que busca un libro del catalogo por el ISBN.
	 * @param catalogo
	 */
	private static void busqueda(ArrayList<Libro> catalogo) {

		// Pregunta al usuario el ISBN
		String isbn_deseado = "";
		Scanner teclado = new Scanner(System.in);
		System.out.print("Introduzca el ISBN: ");
		isbn_deseado = teclado.nextLine();


		Libro l = new Libro();
		l.setIsbn(isbn_deseado);

		int posicion = 0;
		posicion = catalogo.indexOf(l);

		// Si está muestra todos los datos del libro
		// Si no está muestra un mensaje diciendo que el libro no está en la lista
		if (posicion < 0) {
			System.out.println("El libro no existe");
		} else {
			System.out.println("El libro es: \n" + (catalogo.get(posicion)));
		}
	}

	/**
	 * Metodo que ordena los libros del catalogo.
	 * @param catalogo
	 */
	private static void ordenar(ArrayList<Libro> catalogo) {

		Scanner teclado = new Scanner(System.in);
		System.out.println("¿Deseas ordenar por titulo o por numero de paginas?\n");
		String tipo = teclado.next();
		//Si elige titulo, ordena los titulos de los libros alfabeticamente por orden natural.
		if (tipo.equals("titulo")) {

			Collections.sort(catalogo);
			//Bucle for que recorre el catalogo.
			for (Libro l : catalogo) {
				System.out.println(" ");
				System.out.println(l);
			}
		//Si elige paginas, ordena los libros por orden no natural.
		} else if (tipo.equals("paginas")) {

			Comparator<Libro> a = new Libro();
			Collections.sort(catalogo, a);
			
			Collections.sort(catalogo, new Libro());
			
			
			//Bucle for que recorre el catalogo.
			for (Libro l : catalogo) {
				System.out.println(" ");
				System.out.println(l);
			}
		}
	}

	/**
	 * Metodo que crea un fichero.
	 * @param catalogo
	 * @throws IOException
	 */
	private static void salvarFichero(ArrayList<Libro> catalogo) throws IOException {

		Scanner teclado = new Scanner(System.in);

		System.out.print("Nombre del fichero que deseas crear: ");

		String nombreFichero = teclado.next();
		//Objeto con el que se crean ficheros.
		FileWriter fichero = new FileWriter(nombreFichero);

		int i = 0;
		//Bucle for que recorre el catalogo.
		for (Libro l : catalogo) {

			fichero.write(l.getTitulo() + "," + l.getIsbn() + "," + l.getGenero() + "," + l.getAutor() + ","
					+ l.getPaginas()+"\n");
		}

		fichero.close();
	}


	
	/**
	 * Metodo que carga un fichero.
	 * @param catalogo
	 */
	private static void cargarFichero(ArrayList<Libro> catalogo) {

        Libro libro = null;

        try {

            System.out.println("Introduzca el nombre del archivo a leer");
            Scanner teclado = new Scanner(System.in);
            String respuesta = teclado.next(); 
            //Objeto con el que se carga un fichero.
            File myObj = new File(respuesta);
            Scanner myReader = new Scanner(myObj);

            System.out.println("El fichero ha sido cargado.");

            while (myReader.hasNextLine()) {


                String line = myReader.next();
                String[] datos = line.split(",");

                String titulo = datos[0];
                String isbn = datos[1];
                Genero genero = Genero.getGenero(datos[2]);
                String autor = datos[3];
                Integer paginas = Integer.parseInt(datos[4]);

                libro = new Libro(titulo, isbn, genero, autor, paginas);
                catalogo.add(libro);

                while (myReader.hasNextLine()) {
                    String data = myReader.nextLine();
                    System.out.println(data);
                }
            }
            myReader.close();
            //Excepcion
        } catch (FileNotFoundException e) {
            System.out.println("Error del programa, vuelva al menú.");
            e.printStackTrace();
        }
    }
    
	/**
	 * Metodo que limpia el catalogo.
	 * @param catalogo
	 */
	private static void limpiarCatalogo(ArrayList<Libro> catalogo) {

		catalogo.clear();

		System.out.println("Catalogo borrado.");

	}
	/**
	 * Metodo validador de los libros
	 * @param validar
	 */
	private static boolean validador1(String validar) {
		
		return validar.matches("[\\w-]+:[0-9]+:(NOVELA|POESIA|FICCION):[\\w-]+:[0-9]+");
	}
	


}